// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { Chatroom } from '../../../app/models/models';
// import { RootState } from '../../../app/store';
// // import { CreateNewRoomRequest, RoomService } from '../../../services/room.service';
// // import { CreateNewRoomResponse } from './roomDto';

// export interface Room {
//   id: number;
//   name: string;
// }

// export interface RoomState {
//   chatRooms: Chatroom[];
// }

// const initialState: RoomState = {
//   chatRooms: []
// };


// // The function below is called a thunk and allows us to perform async logic. It
// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// // will call the thunk with the `dispatch` function as the first argument. Async
// // code can then be executed and other actions can be dispatched. Thunks are
// // typically used to make async requests.
// export const getAllRoomsAsync = createAsyncThunk(
//   'room/getall',
//   async (): Promise<Chatroom[]> => {
//     const response = await RoomService.getAllRooms() as Chatroom[];
//     console.log(response);
//     return response ;
//   }
// );

// export const createRoomAsync = createAsyncThunk(
//   'room/create',
//   async (createNewRoomRequest: CreateNewRoomRequest): Promise<CreateNewRoomResponse> => {
//     const response = await RoomService.createRoom(createNewRoomRequest);
//     return response as CreateNewRoomResponse;
//   }
// );


// export const roomSlice = createSlice({
//   name: 'room',
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: { },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(getAllRoomsAsync.fulfilled, (state, action) => {
//         console.log("getAllRoomsAsync COMPLETE");
//         console.log(action);
//         state.chatRooms = action.payload;
//       })
//       .addCase(getAllRoomsAsync.rejected, (state, action) => {
//         console.log("getAllRoomsAsync ERROR");
//         console.log(action);
//       })
      
//       .addCase(createRoomAsync.fulfilled, (state, action) => {
//         console.log("createRoomAsync COMPLETE");
//         console.log(action);
//       })
//       .addCase(createRoomAsync.rejected, (state, action) => {
//         console.log("createRoomAsync ERROR");
//         console.log(action);
//       })
//       ;
//   },
// });

// export const selectRoom = (state: RootState) => state.room;

// export default roomSlice.reducer;

export { }